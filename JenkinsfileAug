pipeline {
  agent any
  environment {
    PROJECT_VERSION=project_version()
    AWS_REGION= "us-west-2"
    CLUSTER_NAME="eksdemo-live1"
  }

  stages {
    //stage('GitCheckout') {
      //steps{
      //git credentialsId: 'GitHubCreds', url: 'https://github.com/ssts-alg/myapp.git'
      //}
    //}
    stage('Maven Build') {
      steps {
        sh '''
        mvn clean package
        '''
      }
    }
    stage('Docker Build') {
      steps {
        sh '''
        docker build -t sstechnosolutions/testapp:$PROJECT_VERSION .
        '''
      }
    }
    stage('Docker Push To Dockerhub') {
      when { branch 'master'}
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerHubPasswd', passwordVariable: 'DOCKERHUB_PASSWD', usernameVariable: 'DOCKERHUB_USERNAME')]) {
          sh '''
          docker login -u $DOCKERHUB_USERNAME -p $PASSWORD_DOCKER
          docker push sstechnosolutions/testapp:$PROJECT_VERSION
          '''
        }
      }
    }
    stage('DownLoad Kube Config dev') {
      when { branch 'develop' }
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws-creds', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY')]) {
          sh '''
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
          '''
        }
      }
    }
    stage('DownLoad Kube Config Prod') {
      when { branch 'master' }
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws-creds', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY')]) {
          sh '''
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
          '''
        }
      }
    }
    stage('Kubernetes Deploy Dev') {
      when { branch 'develop' }
      steps {
        sh 'sh kubernetes/run_deployment.sh'
      }
    }
    stage('Kubernetes Deploy Prod') {
      when { branch 'master' }
      steps {
        sh 'sh kubernetes/run_deployment.sh'
      }
    }
    stage('Kubernetes Deploy Service Dev ') {
    when { branch 'develop' }
      steps {
        sh 'kubectl apply -f kubernetes/service.yaml'
      }
    }
    stage('Kubernetes Deploy Service prod ') {
    when { branch 'master' }
      steps {
        sh 'kubectl apply -f kubernetes/service.yaml'
      }
    }
  }
}

def project_version() {
   return sh(returnStdout: true, script:"cat pom.xml | grep \"version\" | head -1 | awk \'{print \$1}\' |  sed \"s/<version>//\" | sed \"s/<.*//\"")
 }
